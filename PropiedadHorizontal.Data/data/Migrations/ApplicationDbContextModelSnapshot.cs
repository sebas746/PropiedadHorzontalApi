// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PropiedadHorizontal.Data.Context;

namespace PropiedadHorizontal.Data.data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PropiedadHorizontal.Data.Models.Administradores", b =>
                {
                    b.Property<string>("IdDocumentoAdministrador")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ApellidoAdministrador")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("CelularAdministrador")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("EmailAdministrador")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("IdTipoDocumentoAdministrador")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NombreAdministrador")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("IdDocumentoAdministrador");

                    b.HasIndex("IdTipoDocumentoAdministrador");

                    b.ToTable("Administradores");
                });

            modelBuilder.Entity("PropiedadHorizontal.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PropiedadHorizontal.Data.Models.AreasComunes", b =>
                {
                    b.Property<int>("IdAreaComun")
                        .HasColumnType("int");

                    b.Property<string>("NitPropiedadHorizontal")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NombreAreaComun")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("IdAreaComun");

                    b.HasIndex("NitPropiedadHorizontal");

                    b.ToTable("AreasComunes");
                });

            modelBuilder.Entity("PropiedadHorizontal.Data.Models.Contadores", b =>
                {
                    b.Property<string>("IdDocumentoContador")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ApellidoContador")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("CelularContador")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("EmailContador")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("IdTipoDocumentoContador")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NombreContador")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("IdDocumentoContador");

                    b.HasIndex("IdTipoDocumentoContador");

                    b.ToTable("Contadores");
                });

            modelBuilder.Entity("PropiedadHorizontal.Data.Models.Copropiedades", b =>
                {
                    b.Property<long>("IdCopropiedad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AreaCopropiedad")
                        .HasColumnType("decimal(8, 3)");

                    b.Property<string>("CodigoParqueaderoCopropiedad")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<decimal>("CoeficienteCopropiedad")
                        .HasColumnType("decimal(8, 5)");

                    b.Property<decimal?>("CuotaAdministracionCopropiedad")
                        .HasColumnType("decimal(11, 2)");

                    b.Property<bool?>("EsResidenteCopropietario")
                        .HasColumnType("bit");

                    b.Property<string>("IdDocumentoCopropietario")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IdDocumentoResidente")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("IdTipoCopropiedad")
                        .HasColumnType("int");

                    b.Property<string>("NitPropiedadHorizontal")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NombreCopropiedad")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("IdCopropiedad");

                    b.HasIndex("IdDocumentoCopropietario");

                    b.HasIndex("IdDocumentoResidente");

                    b.HasIndex("IdTipoCopropiedad");

                    b.HasIndex("NitPropiedadHorizontal");

                    b.ToTable("Copropiedades");
                });

            modelBuilder.Entity("PropiedadHorizontal.Data.Models.Copropietarios", b =>
                {
                    b.Property<string>("IdDocumentoCopropietario")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ApellidosCopropietario")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("CelularCopropietario")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("EmailCopropietario")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FechaNacimientoCopropietario")
                        .HasColumnType("date");

                    b.Property<string>("GeneroCopropietario")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<int>("IdTipoDocumentoCopropietario")
                        .HasColumnType("int");

                    b.Property<string>("NombresCopropietario")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("IdDocumentoCopropietario")
                        .HasName("PK_Copropietario");

                    b.HasIndex("IdTipoDocumentoCopropietario");

                    b.ToTable("Copropietarios");
                });

            modelBuilder.Entity("PropiedadHorizontal.Data.Models.Departamentos", b =>
                {
                    b.Property<int>("IdDepartamento")
                        .HasColumnType("int");

                    b.Property<string>("NombreDepartamento")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("IdDepartamento");

                    b.ToTable("Departamentos");
                });

            modelBuilder.Entity("PropiedadHorizontal.Data.Models.Municipios", b =>
                {
                    b.Property<long>("IdMunicipio")
                        .HasColumnType("bigint");

                    b.Property<int?>("IdDepartamento")
                        .HasColumnType("int");

                    b.Property<string>("NombreMunicipio")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("IdMunicipio")
                        .HasName("PK_IdMunicipio");

                    b.HasIndex("IdDepartamento");

                    b.ToTable("Municipios");
                });

            modelBuilder.Entity("PropiedadHorizontal.Data.Models.PropiedadesHorizontales", b =>
                {
                    b.Property<string>("NitPropiedadHorizontal")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("AreaPrivadaConstruidaPropiedadHorizontal")
                        .HasColumnType("decimal(10, 3)");

                    b.Property<decimal?>("AreaTotalCesionPropiedadHorizontal")
                        .HasColumnType("decimal(10, 3)");

                    b.Property<decimal?>("AreaTotalLotePropiedadHorizontal")
                        .HasColumnType("decimal(10, 3)");

                    b.Property<string>("DireccionPropiedadHorizontal")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("EmailPropiedadHorizontal")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("IdDocumentoAdministrador")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IdDocumentoContador")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("IdMunicipio")
                        .HasColumnType("bigint");

                    b.Property<int?>("IdTipoCuentaPropiedadHorizontal")
                        .HasColumnType("int");

                    b.Property<int?>("IdTipoPropiedadHorizontal")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LogoPropiedadHorizontal")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("NombreBancoPropiedadHorizontal")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NombrePropiedadHorizontal")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("NumeroCuentaPropiedadHorizontal")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("TelefonoPropiedadHorizontal")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("NitPropiedadHorizontal");

                    b.HasIndex("IdDocumentoAdministrador");

                    b.HasIndex("IdDocumentoContador");

                    b.HasIndex("IdMunicipio");

                    b.HasIndex("IdTipoCuentaPropiedadHorizontal");

                    b.HasIndex("IdTipoPropiedadHorizontal");

                    b.ToTable("PropiedadesHorizontales");
                });

            modelBuilder.Entity("PropiedadHorizontal.Data.Models.Proveedores", b =>
                {
                    b.Property<int>("IdProveedor")
                        .HasColumnType("int");

                    b.Property<string>("EmailProveedor")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("IdTipoCuentaProveedor")
                        .HasColumnType("int");

                    b.Property<int?>("IdTipoDocumentoProveedor")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoServicioProveedor")
                        .HasColumnType("int");

                    b.Property<string>("NitPropiedadHorizontal")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NombreBancoProveedor")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NombreProveedor")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("NumeroCuentaProveedor")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("TelefonoProveedor")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdProveedor");

                    b.HasIndex("IdTipoCuentaProveedor");

                    b.HasIndex("IdTipoDocumentoProveedor");

                    b.HasIndex("IdTipoServicioProveedor");

                    b.HasIndex("NitPropiedadHorizontal");

                    b.ToTable("Proveedores");
                });

            modelBuilder.Entity("PropiedadHorizontal.Data.Models.Residentes", b =>
                {
                    b.Property<string>("IdDocumentoResidente")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ApellidosResidente")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("CelularResidente")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("EmailResidente")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("GeneroResidente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdTipoDocumentoResidente")
                        .HasColumnType("int");

                    b.Property<string>("NombresResidente")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("IdDocumentoResidente")
                        .HasName("PK_Residente");

                    b.HasIndex("IdTipoDocumentoResidente");

                    b.ToTable("Residentes");
                });

            modelBuilder.Entity("PropiedadHorizontal.Data.Models.TipoCopropiedades", b =>
                {
                    b.Property<int>("IdTipoCopropiedad")
                        .HasColumnType("int");

                    b.Property<string>("DescripcionTipoCopropiedad")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("NombreTipoCopropiedad")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("IdTipoCopropiedad");

                    b.ToTable("TipoCopropiedades");
                });

            modelBuilder.Entity("PropiedadHorizontal.Data.Models.TipoDocumentos", b =>
                {
                    b.Property<int>("IdTipoDocumento")
                        .HasColumnType("int");

                    b.Property<string>("DescripcionTipoDocumento")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("NombreTipoDocumento")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("IdTipoDocumento")
                        .HasName("PK_TipoDocumento");

                    b.ToTable("TipoDocumentos");
                });

            modelBuilder.Entity("PropiedadHorizontal.Data.Models.TipoServicio", b =>
                {
                    b.Property<int>("IdTipoServicio")
                        .HasColumnType("int");

                    b.Property<string>("DescripcionTipoServicio")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("NombreTipoServicio")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("IdTipoServicio");

                    b.ToTable("TipoServicio");
                });

            modelBuilder.Entity("PropiedadHorizontal.Data.Models.TiposAgrupamiento", b =>
                {
                    b.Property<string>("TipoAgrupamiento")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("TipoAgrupamiento")
                        .HasName("PK__TiposAgr__1FF98F66F1FD5B4B");

                    b.ToTable("TiposAgrupamiento");
                });

            modelBuilder.Entity("PropiedadHorizontal.Data.Models.TiposCuentasBancarias", b =>
                {
                    b.Property<int>("IdTipoCuentaBancaria")
                        .HasColumnType("int");

                    b.Property<string>("DescripcionTipoCuentaBancaria")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("NombreTipoCuentaBancaria")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("IdTipoCuentaBancaria")
                        .HasName("PK_TipoCuentaBancaria");

                    b.ToTable("TiposCuentasBancarias");
                });

            modelBuilder.Entity("PropiedadHorizontal.Data.Models.TiposPropiedadesHorizontales", b =>
                {
                    b.Property<int>("IdTipoPropiedadHorizontal")
                        .HasColumnType("int");

                    b.Property<string>("DescripcionTipoPropiedadHorizontal")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("NombreTipoPropiedadHorizontal")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("IdTipoPropiedadHorizontal")
                        .HasName("PK_TipoPropiedadHorizontal");

                    b.ToTable("TiposPropiedadesHorizontales");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PropiedadHorizontal.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PropiedadHorizontal.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PropiedadHorizontal.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PropiedadHorizontal.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PropiedadHorizontal.Data.Models.Administradores", b =>
                {
                    b.HasOne("PropiedadHorizontal.Data.Models.TipoDocumentos", "IdTipoDocumentoAdministradorNavigation")
                        .WithMany("Administradores")
                        .HasForeignKey("IdTipoDocumentoAdministrador")
                        .HasConstraintName("FK_TipoDocumentos_Administradores")
                        .IsRequired();
                });

            modelBuilder.Entity("PropiedadHorizontal.Data.Models.AreasComunes", b =>
                {
                    b.HasOne("PropiedadHorizontal.Data.Models.PropiedadesHorizontales", "NitPropiedadHorizontalNavigation")
                        .WithMany("AreasComunes")
                        .HasForeignKey("NitPropiedadHorizontal")
                        .HasConstraintName("FK_PropiedadesHorizontales_AreasComunes")
                        .IsRequired();
                });

            modelBuilder.Entity("PropiedadHorizontal.Data.Models.Contadores", b =>
                {
                    b.HasOne("PropiedadHorizontal.Data.Models.TipoDocumentos", "IdTipoDocumentoContadorNavigation")
                        .WithMany("Contadores")
                        .HasForeignKey("IdTipoDocumentoContador")
                        .HasConstraintName("FK_TipoDocumentos_Contadores")
                        .IsRequired();
                });

            modelBuilder.Entity("PropiedadHorizontal.Data.Models.Copropiedades", b =>
                {
                    b.HasOne("PropiedadHorizontal.Data.Models.Copropietarios", "Copropietario")
                        .WithMany("Copropiedades")
                        .HasForeignKey("IdDocumentoCopropietario")
                        .HasConstraintName("FK_Copropietarios_Copropiedades");

                    b.HasOne("PropiedadHorizontal.Data.Models.Residentes", "Residente")
                        .WithMany("Copropiedades")
                        .HasForeignKey("IdDocumentoResidente")
                        .HasConstraintName("FK_Residentes_Copropiedades");

                    b.HasOne("PropiedadHorizontal.Data.Models.TipoCopropiedades", "TipoCopropiedad")
                        .WithMany("Copropiedades")
                        .HasForeignKey("IdTipoCopropiedad")
                        .HasConstraintName("FK_TipoCopropiedad_Copropiedades")
                        .IsRequired();

                    b.HasOne("PropiedadHorizontal.Data.Models.PropiedadesHorizontales", "PropiedadHorizontal")
                        .WithMany("Copropiedades")
                        .HasForeignKey("NitPropiedadHorizontal")
                        .HasConstraintName("FK_PropiedadesHorizontales_Copropiedades")
                        .IsRequired();
                });

            modelBuilder.Entity("PropiedadHorizontal.Data.Models.Copropietarios", b =>
                {
                    b.HasOne("PropiedadHorizontal.Data.Models.TipoDocumentos", "TipoDocumento")
                        .WithMany("Copropietarios")
                        .HasForeignKey("IdTipoDocumentoCopropietario")
                        .HasConstraintName("FK_TiposDocumento_Copropietarios")
                        .IsRequired();
                });

            modelBuilder.Entity("PropiedadHorizontal.Data.Models.Municipios", b =>
                {
                    b.HasOne("PropiedadHorizontal.Data.Models.Departamentos", "IdDepartamentoNavigation")
                        .WithMany("Municipios")
                        .HasForeignKey("IdDepartamento")
                        .HasConstraintName("FK_Departamentos_Municipios");
                });

            modelBuilder.Entity("PropiedadHorizontal.Data.Models.PropiedadesHorizontales", b =>
                {
                    b.HasOne("PropiedadHorizontal.Data.Models.Administradores", "IdDocumentoAdministradorNavigation")
                        .WithMany("PropiedadesHorizontales")
                        .HasForeignKey("IdDocumentoAdministrador")
                        .HasConstraintName("FK_PropiedadesHorizontales_Administradores");

                    b.HasOne("PropiedadHorizontal.Data.Models.Contadores", "IdDocumentoContadorNavigation")
                        .WithMany("PropiedadesHorizontales")
                        .HasForeignKey("IdDocumentoContador")
                        .HasConstraintName("FK_PropiedadesHorizontales_Contadores");

                    b.HasOne("PropiedadHorizontal.Data.Models.Municipios", "Municipio")
                        .WithMany("PropiedadesHorizontales")
                        .HasForeignKey("IdMunicipio")
                        .HasConstraintName("FK_Municipios_PropiedadesHorizontales");

                    b.HasOne("PropiedadHorizontal.Data.Models.TiposCuentasBancarias", "TipoCuentaBancaria")
                        .WithMany("PropiedadesHorizontales")
                        .HasForeignKey("IdTipoCuentaPropiedadHorizontal")
                        .HasConstraintName("FK_PropiedadesHorizontales_TiposCuentasBancarias");

                    b.HasOne("PropiedadHorizontal.Data.Models.TiposPropiedadesHorizontales", "TipoPropiedadHorizontal")
                        .WithMany("PropiedadesHorizontales")
                        .HasForeignKey("IdTipoPropiedadHorizontal")
                        .HasConstraintName("FK_PropiedadesHorizontales_TiposPropiedadesHorizontales");
                });

            modelBuilder.Entity("PropiedadHorizontal.Data.Models.Proveedores", b =>
                {
                    b.HasOne("PropiedadHorizontal.Data.Models.TiposCuentasBancarias", "IdTipoCuentaProveedorNavigation")
                        .WithMany("Proveedores")
                        .HasForeignKey("IdTipoCuentaProveedor")
                        .HasConstraintName("FK_TipoCuentaBancaria_Proveedores");

                    b.HasOne("PropiedadHorizontal.Data.Models.TipoDocumentos", "IdTipoDocumentoProveedorNavigation")
                        .WithMany("Proveedores")
                        .HasForeignKey("IdTipoDocumentoProveedor")
                        .HasConstraintName("FK_TiposDocumento_Proveedores");

                    b.HasOne("PropiedadHorizontal.Data.Models.TipoServicio", "IdTipoServicioProveedorNavigation")
                        .WithMany("Proveedores")
                        .HasForeignKey("IdTipoServicioProveedor")
                        .HasConstraintName("FK_TipoServicio_Proveedores")
                        .IsRequired();

                    b.HasOne("PropiedadHorizontal.Data.Models.PropiedadesHorizontales", "NitPropiedadHorizontalNavigation")
                        .WithMany("Proveedores")
                        .HasForeignKey("NitPropiedadHorizontal")
                        .HasConstraintName("FK_PropiedadesHorizontales_Proveedores")
                        .IsRequired();
                });

            modelBuilder.Entity("PropiedadHorizontal.Data.Models.Residentes", b =>
                {
                    b.HasOne("PropiedadHorizontal.Data.Models.TipoDocumentos", "TipoDocumento")
                        .WithMany("Residentes")
                        .HasForeignKey("IdTipoDocumentoResidente")
                        .HasConstraintName("FK_TipoDocumentos_Residente")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
